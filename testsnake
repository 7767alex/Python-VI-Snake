# This is a sample Python script.

# Press ⌃R to execute it or replace it with your code.
# Press Double ⇧ to search everywhere for classes, files, tool windows, actions, and settings.
import pygame
import random
import time
import numpy as np
import Q_learn as Q

pygame.init()  # Initialize everything at the start

# Original values for both is 600 by 400
dis_width = 100 # Width and height of the screen
dis_height = 100

dis = pygame.display.set_mode((dis_width, dis_height))  # Set setting for the display
pygame.display.set_caption('Snake Game RL')  # Caption for window

blue = (0, 0, 255)  # RGB value for blue
red = (255, 0, 0)  # RGB value for red
white = (255, 255, 255)  # RGB value for white
green = (0,255,0) #RGB value for green
black = (0, 0, 0)  # RGB value for black

x1 = 50  # inital value for x
y1 = 50  # initial value for y

x1_change = 0
y1_change = 0
snake_block = 10    #Size of the snake
snake_speed = 10    #Amount of frames per second (original is 15)

font_style = pygame.font.SysFont(None, 50)

def our_snake(snake_block,snake_list_np) :     #Extend the snake

    row = snake_list_np.shape
    a = (row[0]/2)

    for b in range(int(a)):
        #print("B values", snake_list_np[b*2], " ", snake_list_np[b*2+1])
        pygame.draw.rect(dis,black,[snake_list_np[b*2],snake_list_np[b*2+1],snake_block,snake_block])
    #for a in snake_list:
    #    print("A value in our_snake",a)
    #    pygame.draw.rect(dis,black,[a[0],a[1],snake_block,snake_block])

def game_loop_QResult():
    game_over = False
    game_close = False
     # will contains the head indexes
    x1 = dis_width / 2  # initial value for x
    y1 = dis_height / 2 # initial value for y


    x1_change = 0
    y1_change = 0

    foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0
    foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0

    snake_list = []
    snake_length = 1
    snake_list_np = np.array([])




    prev_direction = "LEFT"
    next_move = "LEFT"
    while (not game_over):
        while game_close == True:
            dis.fill(white)
            pygame.display.update()

            ############    AGENT ACTION SHOULD BE DETERMINED BY HERE   ############
            ############    OR BEFORE THE GAME_CLOSE LOOP IS ENTERED   ############
        for event in pygame.event.get():  # In the case of game over start or quit
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:  # Case of quit game_over = true
                    game_over = True
                    game_close = False
                if event.key == pygame.K_c:  # Case of start again, loop again
                    game_loop_QResult()

        if event.type == pygame.KEYDOWN:  # if key is pressed

            if event.key == pygame.K_LEFT:  # Case of lef key
                x1_change = -snake_block
                y1_change = 0
            if event.key == pygame.K_RIGHT:  # Case of right key
                x1_change = snake_block
                y1_change = 0
            if event.key == pygame.K_UP:  # Case of up key
                 # print("HIT")
                y1_change = -snake_block
                x1_change = 0
            if event.key == pygame.K_DOWN:  # Case of down key
                 # print("HIT")
                y1_change = snake_block
                x1_change = 0

        newevent = pygame.event.Event(pygame.KEYDOWN, unicode="left arrow", key=pygame.K_LEFT,
                                      mod=pygame.KMOD_NONE)  # create the event
        pygame.event.post(newevent)

        if (next_move == "left"):
            newevent = pygame.event.Event(pygame.KEYDOWN, unicode="left arrow", key=pygame.K_LEFT,
                                          mod=pygame.KMOD_NONE)  # create the event
            pygame.event.post(newevent)
        elif (next_move == "right"):
            newevent = pygame.event.Event(pygame.KEYDOWN, unicode="right arrow", key=pygame.K_RIGHT,
                                          mod=pygame.KMOD_NONE)  # create the event
            pygame.event.post(newevent)
        elif (next_move == "up"):
            newevent = pygame.event.Event(pygame.KEYDOWN, unicode="up arrow", key=pygame.K_UP,
                                          mod=pygame.KMOD_NONE)  # create the event
            pygame.event.post(newevent)
        elif (next_move == "down"):
            newevent = pygame.event.Event(pygame.KEYDOWN, unicode="down arrow", key=pygame.K_DOWN,
                                          mod=pygame.KMOD_NONE)  # create the event
            pygame.event.post(newevent)

        for event in pygame.event.get():  # For input during game
            # print(event)  # For every input print it out
            if event.type == pygame.QUIT:  # In the case that anything input attempts to close window
                game_over = True  # Set game_over to true

            ############    AGENT ACTION SHOULD BE DETERMINED BY HERE   ############
            ############    OR BEFORE THE GAME_CLOSE LOOP IS ENTERED   ############

            if event.type == pygame.KEYDOWN:  # if key is pressed

                if event.key == pygame.K_LEFT:  # Case of lef key
                    x1_change = -snake_block
                    y1_change = 0
                if event.key == pygame.K_RIGHT:  # Case of right key
                    x1_change = snake_block
                    y1_change = 0
                if event.key == pygame.K_UP:  # Case of up key
                    # print("HIT")
                    y1_change = -snake_block
                    x1_change = 0
                if event.key == pygame.K_DOWN:  # Case of down key
                    # print("HIT")
                    y1_change = snake_block
                    x1_change = 0
        ##############################################
        ######## MOVE HAS BEEN TAKEN INTO ACCOUNT FOR THE SNAKE ########################
        if x1 >= dis_width or x1 < 0 or y1 >= dis_height or y1 < 0:  # the case that the snake hits a border
            game_close = True

        x1 = x1 + x1_change  # Updated y and x positions of snake
        y1 = y1 + y1_change

        dis.fill(white)  # Fil display with white

        snake_Head = [x1, y1]

        snake_list_np = np.append(snake_list_np, snake_Head)
        row = snake_list_np.shape
        snake_len = (row[0] / 2)

        if int(snake_len) > snake_length:
            # del snake_list[0]
            snake_list_np = np.delete(snake_list_np, [0, 1])

        row = snake_list_np.shape
        snake_len = (row[0] / 2)

        for a in range(int(snake_len - 1)):
            # print("For loop np ", snake_list_np[a*2], " ", snake_list_np[a*2+1])
            if (int(snake_list_np[a * 2]) == x1 and int(snake_list_np[a * 2 + 1]) == y1):
                game_close = True

        our_snake(snake_block, snake_list_np)

        pygame.draw.rect(dis, blue, [foodx, foody, snake_block, snake_block])  # Draw food pellet
        pygame.draw.rect(dis, black,
                         [x1, y1, snake_block, snake_block])  # position of rectangle 200,150 and then size 10,10

        pygame.display.update()  # Update what is in window

        if x1 == foodx and y1 == foody:  # Case of head running into food
            # check_food(obstacle_array,foodx,foody)
            foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0
            foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0
            snake_length = snake_length + 1  # Extend snake and replace old food pellet
            # print("Yummy")

        params = {
            'food_posx': foodx,
            'food_posy': foody,
            'snake_pos': snake_Head,
            'snake_body': snake_list_np,
            'score': snake_length,
            'screenSizeX': dis_width,
            'screenSizeY': dis_height,

        }

        next_move = Q.get_shortest_path(params, (2+params['snake_pos'][0]/10), (2+params['snake_pos'][1]/10))
        print("Next MOVE: ", next_move)
        prev_direction = next_move
        #newevent = pygame.event.Event(pygame.KEYDOWN, unicode = "left arrow", key =pygame.k_a, mod=pygame.KMOD_NONE)
        pygame.event.post(newevent)
        #clock.tick(snake_speed)

    pygame.quit()
    quit()

def train():
    x1 = dis_width / 2  # initial value for x
    y1 = dis_height / 2 # initial value for y


    x1_change = 0
    y1_change = 0

    foodx = round(random.randrange(0, dis_width - snake_block) / 10.0) * 10.0
    foody = round(random.randrange(0, dis_height - snake_block) / 10.0) * 10.0

    snake_list = []
    snake_length = 1
    snake_list_np = np.array([])

    x1 = x1 + x1_change  # Updated y and x positions of snake
    y1 = y1 + y1_change

    dis.fill(white)  # Fil display with white

    snake_Head = [x1, y1]

    snake_list_np = np.append(snake_list_np, snake_Head)
    row = snake_list_np.shape
    snake_len = (row[0] / 2)

    params = {
        'food_posx': foodx,
        'food_posy': foody,
        'snake_pos': snake_Head,
        'snake_body': snake_list_np,
        'score': snake_length,
        'screenSizeX': dis_width,
        'screenSizeY': dis_height,

    }

    environment = Q.env(params)

    change_to = ''
    learning_rate = 0.2
    gamma = 0.8
    epsilon = 0.3

    Q.Q_train(params, epsilon, gamma, learning_rate)
    #game_loop_Q(environment)


train()
game_loop_QResult()





